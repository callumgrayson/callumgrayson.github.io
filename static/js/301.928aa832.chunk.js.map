{"version":3,"file":"static/js/301.928aa832.chunk.js","mappings":"mLA+EA,MAlEA,WACE,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAMA,SAASC,EAAmBC,GACT,MAAbA,EAAEC,QAA6B,aAAXD,EAAEE,MAAqBF,EAAEG,OAAOC,SACzC,UAAXJ,EAAEE,MAAkBF,EAAEG,OAAOC,SAmBnC,OACE,iBAAKC,UAAU,mBAAf,WACE,qCACA,gBAAKA,UAAU,QAAf,kLAKA,iBAAMA,UAAU,aAAaC,SAxBjC,SAAsBN,GACpBA,EAAEO,iBACF,IACIC,EAzBR,SAAkBC,EAAKC,GACrB,OAAmB,IAAfD,EAAIE,OACCF,GAEPC,EAAO,0CACA,GAoBME,CADN,UAAMZ,EAAEG,OAAO,GAAGU,OACEjB,GAC3B,IAAIY,EAQF,OAAO,EAPP,IAAIM,EAAYC,EAAAA,EAAAA,QAAeP,GAE/BZ,EAAUkB,IAiBV,UACE,iBAAKT,UAAU,MAAf,WACE,kBAAOW,QAAQ,cAAf,sBACA,kBACEd,KAAK,SACLe,KAAK,cACLC,GAAG,cACHC,UAAQ,EACRC,SAzCV,SAAuBpB,GACrBF,EAAUE,EAAEG,OAAOU,QAyCXQ,QAAStB,EACTuB,QAASvB,EACTwB,cAAexB,EACfc,MAAOhB,KAET,kBAAOK,KAAK,SAASW,MAAM,aAG/B,iBAAKR,UAAU,cAAf,WACE,0CACA,iBAAKA,UAAU,SAAf,UACqB,kBAAXV,GAAuBA,EAC9B6B,MAAMC,QAAQ9B,IACbA,EAAO+B,KAAI,SAACC,GAAD,OAAU,yBAAiBA,GAAPA,iB,wTCxE9BZ,OAAS,CACpBa,QADoB,SACZpB,GACN,IAAKA,EAAOG,OACV,MAAO,wBAGT,IAAMkB,GAAE,yIAAOrB,EAAOsB,MAAM,KACxBC,GAAI,yIAAOF,GAEXG,EAAS,GACbC,KAAKC,eAAeH,EAFT,GAEqBC,GAChCA,EAASC,KAAKE,QAAQH,GAGtB,IAAMI,EAAMH,KAAKI,sBAAsB,GAKjCC,GAAO,yIADI,MACYR,MAAM,KAC/BS,GAAM,yIAAOD,GAEbE,EAAS,GACbP,KAAKC,eAAeK,EAFP,GAEuBC,GACpCA,EAASP,KAAKE,QAAQK,GAItB,IAAMC,GAAQ,yIAAOT,GACfU,GAAK,yIAAON,GACZO,GAAM,yIAAOH,GACfI,EAAS,GACbX,KAAKY,OAAOJ,EAAUC,EAAOC,EAAQC,GAGrC,IAAME,EAAeb,KAAKc,sBAAsBH,GAQhD,OAL2BX,KAAKe,iBAAiBF,IAQnDZ,eA9CoB,SA8CLH,EAAMkB,EAAMC,GACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAKpB,OAAQwC,IAAK,CACpC,IAAIC,GAAC,yIAAOrB,GACRsB,GAAI,yIAAIJ,GAAMK,OAAOF,EAAEG,OAAOJ,EAAG,IAEjCC,EAAEzC,OAAS,EAEbsB,KAAKC,eAAekB,EAAGC,EAAGH,GAG1BA,EAAEM,KAAKH,KAKbhB,sBA7DoB,SA6DEoB,GAKpB,IAJA,IAAIL,EAAIK,EACJC,EAAQ,GAGHP,EAAI,EAAGA,EAAIC,EAAGD,IAErB,IADA,IAAIQ,EAAKR,EAAI,EACJS,EAAI,EAAGA,EAAIR,EAAGQ,IAErB,IADA,IAAIC,EAAKD,EAAI,EACJE,EAAI,EAAGA,EAAIV,EAAGU,IAAK,CAC1B,IAAIC,EAAKD,EAAI,EACbJ,EAAMF,KAAK,CAACG,EAAIE,EAAIE,IAM1B,OAAOL,GAGTb,OAjFoB,SAiFbJ,EAAUC,EAAOC,EAAQC,GAY9B,IANA,IAAIoB,GAAE,yIAAOvB,GACPwB,GAAG,yIAAOvB,GACZwB,GAAG,yIAAOvB,GAILQ,EAAI,EAAGA,EAAIa,EAAGrD,OAAQwC,IAE7B,IAAK,IAAIS,EAAI,EAAGA,EAAIK,EAAItD,OAAQiD,IAE9B,IAAK,IAAIE,EAAI,EAAGA,EAAII,EAAIvD,OAAQmD,IAAK,CAGnC,IAAIK,EAAQD,EAAIJ,GAAGM,QAAQ,GACvBC,EAASH,EAAIJ,GAAGM,QAAQ,GACxBE,EAAQJ,EAAIJ,GAAGM,QAAQ,GAerBG,EAAS,SAACC,EAAUC,EAAUC,EAAOC,GACzC,OAAmB,IAAfD,EAAMC,GACDH,EAAWC,EACM,IAAfC,EAAMC,GACRH,EAAWC,EACM,IAAfC,EAAMC,GACRH,EAAWC,EACM,IAAfC,EAAMC,GACRH,EAAWC,OADb,GAOLG,EAAOL,EAFCP,EAAGb,GAAGgB,GACNH,EAAGb,GAAGgB,EAAQ,GACMF,EAAIL,GAAIO,GAIlCU,GAAE,yIAAOb,EAAGb,IAClB0B,EAAGtB,OAAOY,EAAO,EAAGS,GAEpB,IAAIE,GAAO,yIAAOb,EAAIL,IACtBkB,EAAQvB,OAAOY,EAAO,GACtB,IAAMY,GAAG,yIAAOD,GACZE,GAAO,yIAAOd,EAAIJ,IACtBkB,EAAQzB,OAAOY,EAAO,GACtB,IAGIc,EACAC,EAJEC,GAAG,yIAAOH,GAMhBE,EAASf,EAAQG,EAAQA,EAAQA,EAAQ,EAGzC,IAEIc,EAAOb,EAFEM,EAJbI,EAAUd,EAAQE,EAASA,EAASA,EAAS,GAKhCQ,EAAGI,EAAU,GACQF,EAAKE,GAIjCI,GAAE,yIAAOR,GACfQ,EAAG9B,OAAO0B,EAAS,EAAGG,GAEtB,IAAIE,GAAQ,yIAAOP,GACnBO,EAAS/B,OAAO0B,EAAS,GACzB,IAAMM,GAAG,yIAAOD,IAEJ,yIAAOH,GACV5B,OAAO0B,EAAS,GAGzB,IAAIO,EAQJ,GAAa,KAFFjB,EAFEc,EAHbG,EAASP,EAAUC,EAASA,EAASA,EAAS,GAIjCG,EAAGG,EAAS,GACSD,EAAKC,GAEtB,CACf,IAAIC,EAAc,EAAC,yIAAIzB,EAAGb,KAAR,yIAAiBc,EAAIL,KAArB,yIAA8BM,EAAIJ,KACpDlB,EAAOY,KAAKiC,MAOtBtD,QA1LoB,SA0LZuD,GAEN,IADA,IAAIC,EAAY,GACPxC,EAAI,EAAGA,EAAIuC,EAAI/E,OAAQwC,IAAK,CAEnC,IADA,IAAIyC,EAAU,GACLhC,EAAI,EAAGA,EAAI8B,EAAIvC,GAAGxC,OAAQiD,IAAK,CACtC,IAAIE,EAAI+B,SAASH,EAAIvC,GAAGS,IACxBgC,EAAQpC,KAAKM,GAEf6B,EAAUnC,KAAKoC,GAEjB,OAAOD,GAGT5C,sBAvMoB,SAuMEH,GAGpB,IAFA,IAAIkD,EAAS,GAEJC,EAAI,EAAGA,EAAInD,EAAOjC,OAAQoF,IAAK,CAEtC,IAAIC,EAAW/D,KAAKgE,YAAYrD,EAAOmD,IAEnCG,EAAWjE,KAAKkE,YAAYH,GAEhCF,EAAOtC,KAAK0C,GAEd,OAAOJ,GAGTG,YArNoB,SAqNRG,GACV,IAAMC,GAAS,yIAAOD,EAAM,IAGtBjC,EAAQiC,EAAM,GAAGhC,QAAQ,GACzBC,EAAS+B,EAAM,GAAGhC,QAAQ,GAC1BE,EAAQ8B,EAAM,GAAGhC,QAAQ,GAEzBkC,EAAqB,IAAVnC,EAAc,IAAgB,IAAVA,EAAc,IAAM,IACnDoC,EAAuB,IAAXlC,EAAe,IAAiB,IAAXA,EAAe,IAAM,IACtDmC,EAAqB,IAAVlC,EAAc,IAAgB,IAAVA,EAAc,IAAM,IAqCzD,OAjCA+B,EAAU9C,OAAOY,EAAO,EAAG,CAACiC,EAAM,GAAGjC,GAAQiC,EAAM,GAAGjC,EAAQ,KAY7C,CACfsC,OAAQ,CACNC,GAXOL,EAAUlC,GAYjBwC,GAXQP,EAAM,GAAGjC,GAYjByC,MAAOzC,EACP0C,IAAKP,GAEPQ,OAAQ,CACNjC,GAdOwB,EAAUhC,GAejBsC,GAdQP,EAAM,GAAG/B,GAejBuC,MAAOvC,EACPwC,IAAKN,GAEPQ,OAAQ,CACN1B,GAjBOgB,EAAU/B,GAkBjBqC,GAjBQP,EAAM,GAAG9B,GAkBjBsC,MAAOtC,EACPuC,IAAKL,KAOXL,YAvQoB,qBAuQRa,OAEV,IAAIC,OAASD,MAAMP,OAAOE,GACtBO,OAASF,MAAMF,OAAOH,GACtBQ,OAASH,MAAMD,OAAOJ,GAEpBS,IAAMJ,MAAMP,OAAOC,GAAG,GACtBW,IAAML,MAAMP,OAAOC,GAAG,GACtB7B,GAAKmC,MAAMF,OAAOjC,GAClBQ,GAAK2B,MAAMD,OAAO1B,GAGlBiC,OAASN,MAAMP,OAAOG,MACtBW,OAASP,MAAMF,OAAOF,MACtBY,OAASR,MAAMD,OAAOH,MAGxBa,MAAQ,SAAC9C,GACX,OAAY,IAARA,EACK,IACU,IAARA,EACF,IACU,IAARA,EACF,IACU,IAARA,EACF,SADF,GAKH+C,OAASD,MAAMR,QACfU,OAASF,MAAMP,QACfU,OAASH,MAAMN,QAGfU,UAAS,WAAOT,KAAP,OAAaM,QAAb,OAAsBL,IAAtB,KAGXS,UAAY,GACVC,SAAWR,OAASD,OACT,IAAbS,SACFD,UAAS,WAAOzC,IAAP,OAAYsC,QAAZ,OAAqB9C,GAArB,MACc,IAAdkD,SACTD,UAAS,WAAOjD,IAAP,OAAY8C,QAAZ,OAAqBtC,GAArB,KACa,IAAb0C,SACTD,UAAS,WAAOD,WAAP,OAAmBF,QAAnB,OAA4B9C,GAA5B,MACc,IAAdkD,SACTD,UAAS,WAAOjD,IAAP,OAAY8C,QAAZ,OAAqBE,UAArB,KAETG,QAAQC,IAAI,uCAId,IAAIC,UAAY,GACD,IAAXV,QAA2B,IAAXF,OAClBY,UAAS,UAAML,WAAN,OAAkBD,QAAlB,OAA2BE,WAChB,IAAXN,QAA2B,IAAXF,OACzBY,UAAS,UAAMJ,WAAN,OAAkBF,QAAlB,OAA2BC,WAChB,IAAXL,OACTU,UAAS,UAAM7C,IAAN,OAAWuC,QAAX,OAAoBE,WACT,IAAXN,OACTU,UAAS,UAAMJ,WAAN,OAAkBF,QAAlB,OAA2BvC,IAEpC2C,QAAQC,IAAI,uCAId,IAAIE,SAAW,GACE,IAAbJ,SACFI,SAAQ,UAAMN,WAAN,OAAkBD,QAAlB,OAA2BvC,IAA3B,OAAgCsC,QAAhC,OAAyC9C,KAC1B,IAAdkD,SACTI,SAAQ,UAAMtD,IAAN,OAAW8C,QAAX,OAAoBtC,IAApB,OAAyBuC,QAAzB,OAAkCC,WACpB,IAAbE,UAA6B,IAAXT,OAC3Ba,SAAQ,UAAMN,WAAN,OAAkBF,QAAlB,OAA2B9C,IAA3B,OAAgC+C,QAAhC,OAAyCvC,IAC3B,IAAb0C,UAA6B,IAAXT,OAC3Ba,SAAQ,UAAM9C,IAAN,OAAWuC,QAAX,OAAoBC,WAApB,OAAgCF,QAAhC,OAAyC9C,KAC1B,IAAdkD,UAA8B,IAAXT,OAC5Ba,SAAQ,UAAM9C,IAAN,OAAWuC,QAAX,OAAoB/C,IAApB,OAAyB8C,QAAzB,OAAkCE,YACnB,IAAdE,UAA8B,IAAXT,OAC5Ba,SAAQ,UAAMtD,IAAN,OAAW8C,QAAX,OAAoBE,WAApB,OAAgCD,QAAhC,OAAyCvC,IAEjD2C,QAAQC,IAAI,uCAId,IAAMG,oBAAmB,UAAMhB,KAAN,OAAYM,QAAZ,OAAqBL,KAG1CgB,SAAW,GACE,IAAbN,SACFM,SAAQ,UAAMD,qBAAN,OAA4BR,OAA5B,YAAsCvC,IAAtC,OAA2CsC,QAA3C,OAAoD9C,GAApD,MACe,IAAdkD,SACTM,SAAQ,WAAOxD,IAAP,OAAY8C,QAAZ,OAAqBtC,GAArB,YAA2BuC,QAA3B,OAAoCQ,qBACtB,IAAbL,UAA6B,IAAXT,OAC3Be,SAAQ,WAAOD,qBAAP,OAA6BT,QAA7B,OAAsC9C,GAAtC,YAA4C+C,QAA5C,OAAqDvC,IACvC,IAAb0C,UAA6B,IAAXT,OAC3Be,SAAQ,UAAMhD,IAAN,OAAWuC,OAAX,YAAqBQ,qBAArB,OAA2CT,QAA3C,OAAoD9C,GAApD,MACe,IAAdkD,UAA8B,IAAXT,OAC5Be,SAAQ,UAAMhD,IAAN,OAAWuC,OAAX,YAAqB/C,IAArB,OAA0B8C,QAA1B,OAAmCS,oBAAnC,MACe,IAAdL,UAA8B,IAAXT,OAC5Be,SAAQ,WAAOxD,IAAP,OAAY8C,QAAZ,OAAqBS,oBAArB,YAA4CR,QAA5C,OAAqDvC,IAE7D2C,QAAQC,IAAI,uCAId,IAAIK,cAAa,GACA,IAAbP,SACFO,cAAa,UAAMF,qBAAN,OAA4BR,QAA5B,OAAqCvC,IAArC,OAA0CsC,QAA1C,OAAmD9C,KACzC,IAAdkD,SACTO,cAAa,UAAMzD,IAAN,OAAW8C,QAAX,OAAoBtC,IAApB,OAAyBuC,QAAzB,OAAkCQ,qBACzB,IAAbL,UAA6B,IAAXT,OAC3BgB,cAAa,UAAMF,qBAAN,OAA4BT,QAA5B,OAAqC9C,IAArC,OAA0C+C,QAA1C,OAAmDvC,IAC1C,IAAb0C,UAA6B,IAAXT,OAC3BgB,cAAa,UAAMjD,IAAN,OAAWuC,QAAX,OAAoBQ,qBAApB,OAA0CT,QAA1C,OAAmD9C,KACzC,IAAdkD,UAA8B,IAAXT,OAC5BgB,cAAa,UAAMjD,IAAN,OAAWuC,QAAX,OAAoB/C,IAApB,OAAyB8C,QAAzB,OAAkCS,sBACxB,IAAdL,UAA8B,IAAXT,OAC5BgB,cAAa,UAAMzD,IAAN,OAAW8C,QAAX,OAAoBS,qBAApB,OAA0CR,QAA1C,OAAmDvC,IAEhE2C,QAAQC,IAAI,uCAKd,IAAIM,SAAW,GAaf,OAVEA,SADEC,KAAKF,iBAAmBE,KAAKN,WACpBI,cAEFE,KAAKH,YAAcG,KAAKN,WACtBG,SAEFG,KAAKL,YAAcK,KAAKN,WACtBC,SAEAD,UAENK,UAGTvF,iBAnZoB,SAmZH0C,GAUf,OAPa,yIAAOA,GACM+C,OAEPC,QAAO,SAACC,EAAKC,GAC9B,OAAOD,EAAIE,SAASD,GAAOD,EAAMA,EAAIrF,OAAOsF,KAC3C,O,8ECvZQ,SAASE,EAAmBpD,GACzC,OCJa,SAA4BA,GACzC,GAAIlE,MAAMC,QAAQiE,GAAM,OAAO,EAAAqD,EAAA,GAAiBrD,GDGzC,CAAkBA,IELZ,SAA0BsD,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOxH,MAAM2H,KAAKH,GFInF,CAAgBtD,KAAQ,EAAA0D,EAAA,GAA2B1D,IGLvE,WACb,MAAM,IAAI2D,UAAU,wIHIwE","sources":["components/Make24/Make24.jsx","components/Make24/maker24.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { make24 } from \"./maker24\";\r\nimport \"./styles.css\";\r\n\r\nfunction validate(num, setter) {\r\n  if (num.length === 4) {\r\n    return num;\r\n  } else {\r\n    setter(\"You must enter a valid 4 digit number\");\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction Make24() {\r\n  const [result, setResult] = useState([]);\r\n  const [digits, setDigits] = useState(\"\");\r\n\r\n  function handlerDigits(e) {\r\n    setDigits(e.target.value);\r\n    // console.log(\"e\", e);\r\n  }\r\n  function handlerDigitsFocus(e) {\r\n    if (e.detail === \"2\" || e.type === \"dblclick\") e.target.select();\r\n    if (e.type === \"focus\") e.target.select();\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    let num = `${e.target[0].value}`;\r\n    let numStr = validate(num, setResult);\r\n    if (numStr) {\r\n      let newResult = make24.solve24(numStr);\r\n      //   console.log(\"newResult\", newResult);\r\n      setResult(newResult);\r\n\r\n      //   clearInput();\r\n    } else {\r\n      //   clearInput();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"make24-container\">\r\n      <h1>Make 24</h1>\r\n      <div className=\"blurb\">\r\n        Enter any four digit number to see the ways the add, subtract, mulitply\r\n        and divide operations, along with parentheses can be mixed with the\r\n        digits to result in 24.\r\n      </div>\r\n      <form className=\"input-area\" onSubmit={handleSubmit}>\r\n        <div className=\"in1\">\r\n          <label htmlFor=\"digit-input\">Number </label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"digit-input\"\r\n            id=\"digit-input\"\r\n            required\r\n            onChange={handlerDigits}\r\n            onFocus={handlerDigitsFocus}\r\n            onClick={handlerDigitsFocus}\r\n            onDoubleClick={handlerDigitsFocus}\r\n            value={digits}\r\n          />\r\n          <input type=\"submit\" value=\"Go\" />\r\n        </div>\r\n      </form>\r\n      <div className=\"output-area\">\r\n        <h3>Arrangements</h3>\r\n        <div className=\"output\">\r\n          {typeof result === \"string\" && result}\r\n          {Array.isArray(result) &&\r\n            result.map((item) => <div key={item}>{item}</div>)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Make24;\r\n","export const make24 = {\r\n  solve24(numStr) {\r\n    if (!numStr.length) {\r\n      return \"Nothing to work with!\";\r\n    }\r\n\r\n    const n0 = [...numStr.split(\"\")];\r\n    let nArr = [...n0];\r\n    let pArr = [];\r\n    let combos = [];\r\n    this.removeOneDigit(nArr, pArr, combos);\r\n    combos = this.retInts(combos);\r\n    // console.log(combos);\r\n\r\n    const ops = this.operationCombinations(4);\r\n    // console.log(ops);\r\n\r\n    // Needing combos, ops and groupings\r\n    const groupStr = \"123\";\r\n    const nGroup0 = [...groupStr.split(\"\")];\r\n    let nGroup = [...nGroup0];\r\n    let pGroup = [];\r\n    let groups = [];\r\n    this.removeOneDigit(nGroup, pGroup, groups);\r\n    groups = this.retInts(groups);\r\n    // console.log(groups);\r\n\r\n    // Altogether...\r\n    const digitSet = [...combos];\r\n    const opSet = [...ops];\r\n    const ordSet = [...groups];\r\n    let sets24 = [];\r\n    this.calc24(digitSet, opSet, ordSet, sets24);\r\n    // console.log(sets24);\r\n\r\n    const stringsArray = this.convertArraysToString(sets24);\r\n    // console.log(stringsArray);\r\n\r\n    const uniqueStringsArray = this.getUniqueStrings(stringsArray);\r\n    // const lenUSA = uniqueStringsArray.length;\r\n    // const randLen = Math.ceil(Math.random() * lenUSA);\r\n\r\n    // return [uniqueStringsArray[randLen]];\r\n    return uniqueStringsArray;\r\n  },\r\n\r\n  removeOneDigit(nArr, pArr, x) {\r\n    for (let a = 0; a < nArr.length; a++) {\r\n      let n = [...nArr];\r\n      let p = [...pArr].concat(n.splice(a, 1));\r\n\r\n      if (n.length > 0) {\r\n        // console.log(n, p);\r\n        this.removeOneDigit(n, p, x);\r\n      } else {\r\n        // console.log(x);\r\n        x.push(p);\r\n      }\r\n    }\r\n  },\r\n\r\n  operationCombinations(gaps) {\r\n    let n = gaps;\r\n    let combs = [];\r\n\r\n    // essentially making all the combos of 111 -> 333\r\n    for (let a = 0; a < n; a++) {\r\n      let n1 = a + 1;\r\n      for (let b = 0; b < n; b++) {\r\n        let n2 = b + 1;\r\n        for (let c = 0; c < n; c++) {\r\n          let n3 = c + 1;\r\n          combs.push([n1, n2, n3]);\r\n        }\r\n      }\r\n    }\r\n\r\n    // console.log(combs);\r\n    return combs;\r\n  },\r\n\r\n  calc24(digitSet, opSet, ordSet, sets24) {\r\n    // for each item in combos\r\n    // apply each set of operations where 1 is add, 2 is sub, 3 is mult, 4 is div\r\n    // apply each order of operations\r\n    // check if the outcome is 24\r\n\r\n    let dS = [...digitSet];\r\n    const opS = [...opSet];\r\n    let orS = [...ordSet];\r\n\r\n    // Now all sets are ready to go\r\n    // dS, opS, orS, sets24\r\n    for (let a = 0; a < dS.length; a++) {\r\n      // dS[a][0], dS[a][1], dS[a][2], dS[a][3]\r\n      for (let b = 0; b < opS.length; b++) {\r\n        // opS[b][0], opS[b][1], opS[b][2] ** can be 1, 2, 3, 4 add sub mult div\r\n        for (let c = 0; c < orS.length; c++) {\r\n          // orS[c][0], orS[c][1], orS[c][2] ** can be 1, 2, 3 order of ops\r\n\r\n          let first = orS[c].indexOf(1); // 0 in array of ops\r\n          let second = orS[c].indexOf(2); // 1\r\n          let third = orS[c].indexOf(3); // 2\r\n\r\n          // Four digits 1, 2, 3, 4\r\n          // let getOp = (arr, key) => {\r\n          //   if (arr[key] === 1) {\r\n          //     return '+';\r\n          //   } else if (arr[key] === 2) {\r\n          //     return '-';\r\n          //   } else if (arr[key] === 3) {\r\n          //     return '*';\r\n          //   } else if (arr[key] === 4) {\r\n          //     return '/';\r\n          //   }\r\n          // }\r\n\r\n          const calCer = (operand1, operand2, opArr, key) => {\r\n            if (opArr[key] === 1) {\r\n              return operand1 + operand2;\r\n            } else if (opArr[key] === 2) {\r\n              return operand1 - operand2;\r\n            } else if (opArr[key] === 3) {\r\n              return operand1 * operand2;\r\n            } else if (opArr[key] === 4) {\r\n              return operand1 / operand2;\r\n            }\r\n          };\r\n\r\n          let oper1 = dS[a][first];\r\n          let oper2 = dS[a][first + 1];\r\n          let res1 = calCer(oper1, oper2, opS[b], first);\r\n          // console.log(res1);\r\n\r\n          // Reduce the arrays\r\n          const d2 = [...dS[a]];\r\n          d2.splice(first, 2, res1);\r\n\r\n          let tempOpS = [...opS[b]];\r\n          tempOpS.splice(first, 1);\r\n          const oP2 = [...tempOpS];\r\n          let tempOrS = [...orS[c]];\r\n          tempOrS.splice(first, 1);\r\n          const oR2 = [...tempOrS];\r\n\r\n          // New second and third, adjusted on conditional\r\n          let secondB;\r\n          let thirdB;\r\n          secondB = first > second ? second : second - 1;\r\n          thirdB = first > third ? third : third - 1;\r\n\r\n          // Call Calcer on reduced arrays\r\n          let oper1b = d2[secondB];\r\n          let oper2b = d2[secondB + 1];\r\n          let res2 = calCer(oper1b, oper2b, oP2, secondB);\r\n          // console.log(res2);\r\n\r\n          // Reduce the arrays\r\n          const d3 = [...d2];\r\n          d3.splice(secondB, 2, res2);\r\n\r\n          let tempOpS2 = [...oP2];\r\n          tempOpS2.splice(secondB, 1);\r\n          const oP3 = [...tempOpS2];\r\n\r\n          let tempOrS2 = [...oR2];\r\n          tempOrS2.splice(secondB, 1);\r\n\r\n          // New third, adjusted on conditional\r\n          let thirdC;\r\n          thirdC = secondB > thirdB ? thirdB : thirdB - 1;\r\n\r\n          // Call Calcer on reduced arrays\r\n          let oper1c = d3[thirdC];\r\n          let oper2c = d3[thirdC + 1];\r\n          let res3 = calCer(oper1c, oper2c, oP3, thirdC);\r\n\r\n          if (res3 === 24) {\r\n            let arrayOfArrs = [[...dS[a]], [...opS[b]], [...orS[c]]];\r\n            sets24.push(arrayOfArrs);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  retInts(arr) {\r\n    let retIntArr = [];\r\n    for (let a = 0; a < arr.length; a++) {\r\n      let tempArr = [];\r\n      for (let b = 0; b < arr[a].length; b++) {\r\n        let c = parseInt(arr[a][b]);\r\n        tempArr.push(c);\r\n      }\r\n      retIntArr.push(tempArr);\r\n    }\r\n    return retIntArr;\r\n  },\r\n\r\n  convertArraysToString(sets24) {\r\n    let retArr = [];\r\n\r\n    for (let i = 0; i < sets24.length; i++) {\r\n      // get phaseObj\r\n      let phaseObj = this.getPhaseObj(sets24[i]);\r\n      // get phaseStr\r\n      let phaseStr = this.getPhaseStr(phaseObj);\r\n      // push phaseStr to returnObj\r\n      retArr.push(phaseStr);\r\n    }\r\n    return retArr;\r\n  },\r\n\r\n  getPhaseObj(inArr) {\r\n    const newInArr0 = [...inArr[0]];\r\n\r\n    // get order indexes\r\n    const first = inArr[2].indexOf(1);\r\n    const second = inArr[2].indexOf(2);\r\n    const third = inArr[2].indexOf(3);\r\n\r\n    const posFirst = first === 0 ? \"L\" : first === 1 ? \"M\" : \"R\";\r\n    const posSecond = second === 0 ? \"L\" : second === 1 ? \"M\" : \"R\";\r\n    const posThird = third === 0 ? \"L\" : third === 1 ? \"M\" : \"R\";\r\n\r\n    // splice at inArr[first] cut 2 replace with\r\n    // [inArr[0][first], inArr[0][first + 1]]\r\n    newInArr0.splice(first, 2, [inArr[0][first], inArr[0][first + 1]]);\r\n\r\n    // get vals based on first\r\n    const d1 = newInArr0[first];\r\n    const op1 = inArr[1][first];\r\n\r\n    const d2 = newInArr0[second];\r\n    const op2 = inArr[1][second];\r\n\r\n    const d3 = newInArr0[third];\r\n    const op3 = inArr[1][third];\r\n\r\n    const retPhObj = {\r\n      phase1: {\r\n        d1: d1,\r\n        op: op1,\r\n        opInd: first,\r\n        pos: posFirst,\r\n      },\r\n      phase2: {\r\n        d2: d2,\r\n        op: op2,\r\n        opInd: second,\r\n        pos: posSecond,\r\n      },\r\n      phase3: {\r\n        d3: d3,\r\n        op: op3,\r\n        opInd: third,\r\n        pos: posThird,\r\n      },\r\n    };\r\n\r\n    return retPhObj;\r\n  },\r\n\r\n  getPhaseStr(inObj) {\r\n    // Gets the type of operation from each phase object\r\n    let opPat1 = inObj.phase1.op;\r\n    let opPat2 = inObj.phase2.op;\r\n    let opPat3 = inObj.phase3.op;\r\n\r\n    const d1a = inObj.phase1.d1[0];\r\n    const d1b = inObj.phase1.d1[1];\r\n    const d2 = inObj.phase2.d2;\r\n    const d3 = inObj.phase3.d3;\r\n\r\n    // first second third\r\n    const opInd1 = inObj.phase1.opInd;\r\n    const opInd2 = inObj.phase2.opInd;\r\n    const opInd3 = inObj.phase3.opInd;\r\n\r\n    // Get string vals of ops\r\n    let getOp = (key) => {\r\n      if (key === 1) {\r\n        return \"+\";\r\n      } else if (key === 2) {\r\n        return \"-\";\r\n      } else if (key === 3) {\r\n        return \"*\";\r\n      } else if (key === 4) {\r\n        return \"/\";\r\n      }\r\n    };\r\n\r\n    const op1Str = getOp(opPat1);\r\n    const op2Str = getOp(opPat2);\r\n    const op3Str = getOp(opPat3);\r\n\r\n    // Brackets around phase1\r\n    const phase1Str = `(${d1a}${op1Str}${d1b})`;\r\n\r\n    // Brackets around phase2\r\n    let phase2Str = \"\";\r\n    const opDiff12 = opInd2 - opInd1;\r\n    if (opDiff12 === 2) {\r\n      phase2Str = `(${d3}${op2Str}${d2})`;\r\n    } else if (opDiff12 === -2) {\r\n      phase2Str = `(${d2}${op2Str}${d3})`;\r\n    } else if (opDiff12 === 1) {\r\n      phase2Str = `(${phase1Str}${op2Str}${d2})`;\r\n    } else if (opDiff12 === -1) {\r\n      phase2Str = `(${d2}${op2Str}${phase1Str})`;\r\n    } else {\r\n      console.log(\"WTF?? Something does not make sense\");\r\n    }\r\n\r\n    // String phase3\r\n    let phase3Str = \"\";\r\n    if (opInd3 === 1 && opInd1 === 0) {\r\n      phase3Str = `${phase1Str}${op3Str}${phase2Str}`;\r\n    } else if (opInd3 === 1 && opInd1 === 2) {\r\n      phase3Str = `${phase2Str}${op3Str}${phase1Str}`;\r\n    } else if (opInd3 === 0) {\r\n      phase3Str = `${d3}${op3Str}${phase2Str}`;\r\n    } else if (opInd3 === 2) {\r\n      phase3Str = `${phase2Str}${op3Str}${d3}`;\r\n    } else {\r\n      console.log(\"WTF?? Something does not make sense\");\r\n    }\r\n\r\n    // Brackets around phase1 only\r\n    let only1Str = \"\";\r\n    if (opDiff12 === 2) {\r\n      only1Str = `${phase1Str}${op3Str}${d3}${op2Str}${d2}`;\r\n    } else if (opDiff12 === -2) {\r\n      only1Str = `${d2}${op2Str}${d3}${op3Str}${phase1Str}`;\r\n    } else if (opDiff12 === 1 && opInd1 === 0) {\r\n      only1Str = `${phase1Str}${op2Str}${d2}${op3Str}${d3}`;\r\n    } else if (opDiff12 === 1 && opInd1 === 1) {\r\n      only1Str = `${d3}${op3Str}${phase1Str}${op2Str}${d2}`;\r\n    } else if (opDiff12 === -1 && opInd1 === 2) {\r\n      only1Str = `${d3}${op3Str}${d2}${op2Str}${phase1Str}`;\r\n    } else if (opDiff12 === -1 && opInd1 === 1) {\r\n      only1Str = `${d2}${op2Str}${phase1Str}${op3Str}${d3}`;\r\n    } else {\r\n      console.log(\"WTF?? Something does not make sense\");\r\n    }\r\n\r\n    // Phase1 String with no brackets\r\n    const phase1StrNoBrackets = `${d1a}${op1Str}${d1b}`;\r\n\r\n    // Brackets around phase2\r\n    let only2Str = \"\";\r\n    if (opDiff12 === 2) {\r\n      only2Str = `${phase1StrNoBrackets}${op3Str}(${d3}${op2Str}${d2})`;\r\n    } else if (opDiff12 === -2) {\r\n      only2Str = `(${d2}${op2Str}${d3})${op3Str}${phase1StrNoBrackets}`;\r\n    } else if (opDiff12 === 1 && opInd1 === 0) {\r\n      only2Str = `(${phase1StrNoBrackets}${op2Str}${d2})${op3Str}${d3}`;\r\n    } else if (opDiff12 === 1 && opInd1 === 1) {\r\n      only2Str = `${d3}${op3Str}(${phase1StrNoBrackets}${op2Str}${d2})`;\r\n    } else if (opDiff12 === -1 && opInd1 === 2) {\r\n      only2Str = `${d3}${op3Str}(${d2}${op2Str}${phase1StrNoBrackets})`;\r\n    } else if (opDiff12 === -1 && opInd1 === 1) {\r\n      only2Str = `(${d2}${op2Str}${phase1StrNoBrackets})${op3Str}${d3}`;\r\n    } else {\r\n      console.log(\"WTF?? Something does not make sense\");\r\n    }\r\n\r\n    // No brackets\r\n    let noBracketsStr = ``;\r\n    if (opDiff12 === 2) {\r\n      noBracketsStr = `${phase1StrNoBrackets}${op3Str}${d3}${op2Str}${d2}`;\r\n    } else if (opDiff12 === -2) {\r\n      noBracketsStr = `${d2}${op2Str}${d3}${op3Str}${phase1StrNoBrackets}`;\r\n    } else if (opDiff12 === 1 && opInd1 === 0) {\r\n      noBracketsStr = `${phase1StrNoBrackets}${op2Str}${d2}${op3Str}${d3}`;\r\n    } else if (opDiff12 === 1 && opInd1 === 1) {\r\n      noBracketsStr = `${d3}${op3Str}${phase1StrNoBrackets}${op2Str}${d2}`;\r\n    } else if (opDiff12 === -1 && opInd1 === 2) {\r\n      noBracketsStr = `${d3}${op3Str}${d2}${op2Str}${phase1StrNoBrackets}`;\r\n    } else if (opDiff12 === -1 && opInd1 === 1) {\r\n      noBracketsStr = `${d2}${op2Str}${phase1StrNoBrackets}${op3Str}${d3}`;\r\n    } else {\r\n      console.log(\"WTF?? Something does not make sense\");\r\n    }\r\n\r\n    // tests: brackets12 === noBrackets, brackets12 === brackets1, brackets12 === brackets2\r\n    // Compare: phase3Str, only1Str, only2Str, noBracketsStr\r\n    let finalStr = \"\";\r\n    // eslint-disable-next-line\r\n    if (eval(noBracketsStr) === eval(phase3Str)) {\r\n      finalStr = noBracketsStr;\r\n      // eslint-disable-next-line\r\n    } else if (eval(only2Str) === eval(phase3Str)) {\r\n      finalStr = only2Str;\r\n      // eslint-disable-next-line\r\n    } else if (eval(only1Str) === eval(phase3Str)) {\r\n      finalStr = only1Str;\r\n    } else {\r\n      finalStr = phase3Str;\r\n    }\r\n    return finalStr;\r\n  },\r\n\r\n  getUniqueStrings(arr) {\r\n    // Take arr, sort, remove duplicates, return\r\n    let retArr = [];\r\n    const sortArr = [...arr];\r\n    const sortedArr = sortArr.sort();\r\n\r\n    retArr = sortedArr.reduce((acc, val) => {\r\n      return acc.includes(val) ? acc : acc.concat(val);\r\n    }, []);\r\n\r\n    return retArr;\r\n  },\r\n};\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["useState","result","setResult","digits","setDigits","handlerDigitsFocus","e","detail","type","target","select","className","onSubmit","preventDefault","numStr","num","setter","length","validate","value","newResult","make24","htmlFor","name","id","required","onChange","onFocus","onClick","onDoubleClick","Array","isArray","map","item","solve24","n0","split","nArr","combos","this","removeOneDigit","retInts","ops","operationCombinations","nGroup0","nGroup","groups","digitSet","opSet","ordSet","sets24","calc24","stringsArray","convertArraysToString","getUniqueStrings","pArr","x","a","n","p","concat","splice","push","gaps","combs","n1","b","n2","c","n3","dS","opS","orS","first","indexOf","second","third","calCer","operand1","operand2","opArr","key","res1","d2","tempOpS","oP2","tempOrS","secondB","thirdB","oR2","res2","d3","tempOpS2","oP3","thirdC","arrayOfArrs","arr","retIntArr","tempArr","parseInt","retArr","i","phaseObj","getPhaseObj","phaseStr","getPhaseStr","inArr","newInArr0","posFirst","posSecond","posThird","phase1","d1","op","opInd","pos","phase2","phase3","inObj","opPat1","opPat2","opPat3","d1a","d1b","opInd1","opInd2","opInd3","getOp","op1Str","op2Str","op3Str","phase1Str","phase2Str","opDiff12","console","log","phase3Str","only1Str","phase1StrNoBrackets","only2Str","noBracketsStr","finalStr","eval","sort","reduce","acc","val","includes","_toConsumableArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}